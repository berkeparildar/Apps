[
  {
    "genre": "iOS App",
    "title": "Getir Lite",
    "repoLink": "https://github.com/berkeparildar/Getir-Final-Case/",
    "imageUrl": "assets/images/wonders/logo.png",
    "description": "Getir Lite is a streamlined solution for ordering products online. Getir Lite provides a simplified experience compared to its full version.",
    "titleOne": "Features",
    "partOne": "Product Catalog: Access a comprehensive list of available products displayed both horizontally and vertically on the home screen._Add to Cart: Add desired products to your cart by tapping the '+' button located conveniently on each product._Cart Management: Control the quantity of products in your cart using a floating stepper that appears alongside the product. The cart button on the navigation bar displays the total price of items in the cart._Product Details: Tap on any product to view detailed information, including the option to adjust quantity or add more to your cart._Cart Page: Navigate to the cart page to view all items currently in your cart. Remove all items at once using the trash button, triggering a confirmation modal._Suggested Products: Discover suggested products listed horizontally below the cart items. Quickly add them to your cart by tapping the '+' button._Complete Order: Easily complete your order by tapping the 'complete order' button at the bottom of the cart screen. Confirm your selection to finalize the purchase._Persistent Cart with Core Data: Getir Lite uses Core Data to store products in your cart, ensuring that your selections are saved between sessions.",
    "titleTwo": "How to Use",
    "partTwo": "Browse Products: Explore the available products displayed on the home screen._Add to Cart: Tap the '+' button on any product to add it to your cart. Use the floating stepper to adjust quantities as needed._View Cart: Navigate to the cart screen by tapping the cart button on the navigation bar. Remove all items at once by tapping the trash button._Manage Cart Items: Adjust quantities or remove products directly from the cart screen. Explore suggested products below and add them to your cart with a tap._Complete Your Order: Once satisfied with your selection, tap 'complete order' at the bottom of the cart screen. Confirm your order to finalize the purchase.",
    "videoId": "https://youtu.be/YERyl8qyfqA",
    "imageOnePath": "assets/images/getirlite/1.png",
    "imageTwoPath": "assets/images/getirlite/2.png",
    "imageThreePath": "assets/images/getirlite/3.png",
    "hasVideo": true,
    "hasStore": false,
    "storeUrl": "",
    "tagCount": 3,
    "tags": [
      "Swift",
      "UIKit",
      "VIPER"
    ],
    "isPortait": true,
    "thumbnailOnePath": "assets/images/getirlite/1.png",
    "thumbnailTwoPath": "assets/images/getirlite/2.png",
    "thumbnailThreePath": "assets/images/getirlite/3.png",
    "thumbnailString": "Getir Lite is a streamlined solution for ordering products online."
  },
  {
    "genre": "iOS App",
    "title": "Weather",
    "repoLink": "https://github.com/berkeparildar/Weather",
    "imageUrl": "assets/images/wonders/logo.png",
    "description": "Weather is an iOS application for instantly checking current weather conditions and forecasts for any location you desire. Weather delivers accurate and up-to-date weather data along with a user-friendly interface.",
    "titleOne": "Features",
    "partOne": "Current Weather and Forecasts: Access real-time weather information including temperature, weather description, local time, and daily/hourly forecasts for any location worldwide._OpenWeatherMap API Integration: Utilizes the OpenWeatherMap API to gather current and forecasted weather data, ensuring reliability and precision._Location Search: Easily find and add locations using the integrated search bar. The app utilizes MKSearch to retrieve location names and coordinates based on user input._Home Screen: Added locations are displayed on the home screen as tiles, each showcasing the current weather temperature, location name, local time, weather description, highest, and lowest temperatures._Detailed Weather Information: Tap on a location tile to delve deeper into its weather forecast. View hourly forecasts, a 5-day outlook with high and low temperatures, and weather descriptions accompanied by weather icons._Dynamic Backgrounds: Each location's tile features a custom image background that dynamically changes based on the local time (day or night) of that location._Persistent Storage with Core Data: The app utilizes Core Data to save added locations. This means that once a location is added, it is stored locally, allowing users to access their preferred locations without the need to add them repeatedly. Users can remove stored locations any time they want from the Home Screen.",
    "titleTwo": "How to Use",
    "partTwo": "Add Locations: Use the search bar in the navigation bar to find and add locations of interest._View Weather Data: Instantly see current weather details on each added location's tile, including temperature, local time, and weather description._Tap on a location tile to access detailed forecasts. View hourly forecasts for the upcoming hours and a 5-day forecast with high and low temperatures.",
    "videoId": "https://youtu.be/gEnF44S22-E",
    "imageOnePath": "assets/images/weather/1.png",
    "imageTwoPath": "assets/images/weather/2.png",
    "imageThreePath": "assets/images/weather/3.png",
    "hasVideo": true,
    "hasStore": false,
    "storeUrl": "",
    "tagCount": 3,
    "tags": [
      "Swift",
      "UIKit",
      "MVVM"
    ],
    "isPortait": true,
    "thumbnailOnePath": "assets/images/weather/1.png",
    "thumbnailTwoPath": "assets/images/weather/2.png",
    "thumbnailThreePath": "assets/images/weather/3.png",
    "thumbnailString": "Weather is an iOS application for instantly checking current weather conditions and forecasts for any location users desire."
  },
  {
    "genre": "iOS App",
    "title": "Wonders",
    "repoLink": "https://github.com/berkeparildar/Wonders",
    "imageUrl": "assets/images/wonders/logo.png",
    "description": "Wonders is an iOS app developed using SwiftUI, accompanied by a robust backend server developed with ASP.NET Core. The app serves as a comprehensive guide for users to explore tourist attractions and must-visit places in various countries.",
    "titleOne": "Features",
    "partOne": "Country Selection: Users are presented with a grid of country images and names on the home screen. A search bar allows users to quickly locate a specific country of interest._Tourist Attractions: Upon selecting a country, users can explore a list of tourist attractions. Each attraction is accompanied by an image, a name, and a categorization tag (e.g., historic place, museum)._Filter and Sort: Users can refine their search by using the search bar to find a specific attraction. Tags enable users to filter attractions based on categories like historic places, museums, etc. Attractions can be sorted alphabetically for ease of navigation._Attraction Details: Tapping on an attraction provides detailed information. A larger image of the attraction is displayed, along with its current open/closed status. A small map shows the attraction's location using Apple Maps, offering both a standard and a 3D view._Server Interaction: The app fetches data from the ASP.NET Core server via GET requests. The server provides specific JSON data for countries, as well as images for both countries and attractions. Data is decoded into appropriate models for seamless integration into the app.",
    "titleTwo": "How to Use",
    "partTwo": "Use the home screen to visually select a country or employ the search bar for quicker access._Tap on a country to view a list of tourist attractions._Utilize search, tags, and alphabetical sorting to find specific attractions._Tap on an attraction to access detailed information, like its current open/closed status, or the location._Easily go back to select another attraction, explore more destinations, or choose a different country.",
    "videoId": "https://youtu.be/uxPh-ew53DE",
    "imageOnePath": "assets/images/wonders/1.png",
    "imageTwoPath": "assets/images/wonders/2.png",
    "imageThreePath": "assets/images/wonders/3.png",
    "hasVideo": true,
    "hasStore": false,
    "storeUrl": "",
    "tagCount": 3,
    "tags": [
      "Swift",
      "SwiftUI",
      "ASP .NET Core"
    ],
    "isPortait": true,
    "thumbnailOnePath": "assets/images/wonders/1.png",
    "thumbnailTwoPath": "assets/images/wonders/2.png",
    "thumbnailThreePath": "assets/images/wonders/3.png",
    "thumbnailString": "Wonders is a comprehensive guide for users to explore tourist attractions and must-visit places in various countries."
  },
  {
    "genre": "Arcade Game",
    "title": "Currency Converter",
    "repoLink": "https://github.com/berkeparildar/CurrencyConverter",
    "imageUrl": "assets/images/currencyconverter/logo.png",
    "description": "Currency Converter is an intuitive iOS app developed using SwiftUI, designed to simplify currency conversions effortlessly. As the name suggests, users can utilize this app to convert a specified amount from one currency to another.",
    "titleOne": "Features",
    "partOne": "User-Friendly Interface: Users can easily tap on the currency icons to select their current currency and the target currency for conversion._Wide Currency Support: The app provides access to 16 different currencies, offering a broad range of options for users._Real-time Target Currency Update: The target currency dynamically updates in real-time with each input, allowing users to see instant conversions._Exchange Rates API Integration: Exchange rates for all available currencies are set with the base currency being USD._The entered amount is converted to the target currency by considering the latest exchange rates, ensuring accuracy in calculations.",
    "titleTwo": "How to Use",
    "partTwo":"Launch the App: Open Currency Converter on your iOS device._Currency Selection: Tap the first currency icon to access available currencies. Select your current currency from the list. Use the second currency icon to choose the target currency._Tap the first empty text box to input the amount you wish to convert._The converted amount is displayed in the second text box, providing the equivalent value in the selected target currency.",
    "videoId": "https://youtu.be/OHwwctYCMlY",
    "imageOnePath": "assets/images/currencyconverter/1.png",
    "imageTwoPath": "assets/images/currencyconverter/2.png",
    "imageThreePath": "assets/images/currencyconverter/3.png",
    "hasVideo": true,
    "hasStore": false,
    "storeUrl": "",
    "tagCount": 2,
    "tags": [
      "Swift",
      "SwiftUI"
    ],
    "isPortait": true,
    "thumbnailOnePath": "assets/images/currencyconverter/1.png",
    "thumbnailTwoPath": "assets/images/currencyconverter/2.png",
    "thumbnailThreePath": "assets/images/currencyconverter/3.png",
    "thumbnailString": "Currency Converter is an iOS app to convert a specified amount of money from one currency to another."
  },
  {
    "genre": "",
    "title": "Decentralized Student Information System",
    "repoLink": "https://github.com/DecentralizedStundetInformationSystem",
    "imageUrl": "assets/images/dsis/dsis.png",
    "description": "The Decentralized Student Information System (DSIS) is a blockchain-based application for student information management. By leveraging the power of decentralized technology, DSIS ensures transparent and secure storage of student data, while providing functionalities such as enrollment, term management, course evaluation, and attendance tracking. DSIS consists of three main components: a server, a desktop application for administrators and staff, and a mobile application for students.",
    "titleOne": "Components",
    "partOne": "Server provides functionalities such as enrollment, term management, course evaluation, and attendance tracking. Built using Node.js, the server component acts as the bridge between the blockchain network and client applications, enabling seamless interactions with the decentralized student information system._The desktop application provides a user-friendly interface for administrators and staff members to efficiently manage student information. Student information that will be written on the blockchain is sent through this application._The mobile application is designed specifically for students, allowing them to access their personal information securely from their mobile devices. It offers features like grades, attendance tracking, and other relevant information.",
    "titleTwo": "Students can: ",
    "partTwo": "Access a list of courses they are enrolled in and view detailed information about each course, including course name, instructor, credits, and evaluation._Check their grades and attendance records for each course, providing them with real-time updates on their academic performance._Log in and register using their email and password through Firebase's email/password authentication. This provides a secure and reliable authentication mechanism for accessing the application.",
    "videoId": "",
    "imageOnePath": "assets/images/dsis/home_screen.png",
    "imageTwoPath": "assets/images/dsis/login_screen.png",
    "imageThreePath": "assets/images/dsis/grades.png",
    "hasVideo": false,
    "hasStore": false,
    "storeUrl": "",
    "tagCount": 4,
    "tags": [
      "Solidity",
      "Flutter",
      "Java",
      "NodeJS"
    ],
    "isPortait": true,
    "thumbnailOnePath": "assets/images/dsis/home_screen.png",
    "thumbnailTwoPath": "assets/images/dsis/login_screen.png",
    "thumbnailThreePath": "assets/images/dsis/grades.png",
    "thumbnailString": "The Decentralized Student Information System (DSIS) is a blockchain-based system for student information management."
  },
  {
    "genre": "",
    "title": "CookBook",
    "repoLink": "https://github.com/berkeparildar/Cookbook-App",
    "imageUrl": "assets/images/cookbook/cookbook.jpg",
    "description": "Cookbook is a user-friendly mobile application developed using the Flutter framework that serves as your digital recipe organizer. With Cookbook, you can effortlessly store, manage, and follow your favorite cooking recipes. Cookbook makes cooking more enjoyable and organized, ensuring that you have all your favorite recipes at your fingertips.",
    "titleOne": "Features",
    "partOne": "Cookbook integrates Google authentication for a seamless and secure sign-in process. Users can sign in using their Google accounts, ensuring easy access to their recipe collection._Adding your recipes is a breeze with Cookbook. Simply provide the recipe's name, description, and any notes you'd like to include as helpful reminders._Select from a variety of tags to categorize your recipe for quick searching._When viewing a recipe, Cookbook offers an interactive slide view for the cooking and preparation methods._Users can swipe through the steps, ensuring a smooth and guided cooking experience._For instructions that require precise timing, Cookbook provides a built-in timer. Users can manage their cooking process with ease, thanks to this convenient feature._Looking for a specific recipe? Cookbook lets users search for recipes by name directly from the recipe list, saving time and effort._Users can mark recipes as favorites for quick access to their preferred dishes.Additionally, they can explore recipes based on specific tags, making it simple to discover recipes within desired categories.",
    "titleTwo": "How to Use",
    "partTwo": " Launch the Cookbook app. Sign in using your Google account to start managing your recipes._To add a recipe, click on the \"Add Recipe\" button. Enter the recipe's name, description, and any relevant notes. Choose tags that best represent the recipe._Include the required ingredients and provide a step-by-step method. Specify cooking and preparation time. Hit \"Save\" to add the recipe to your collection._On the main menu, you'll find your list of saved recipes. Tap on a recipe to view its details._Inside a recipe, tap the play button to access the interactive cooking guide. Swipe through the steps to follow the method._Utilize the built-in timer for time-sensitive instructions._Use the search bar to find recipes by name. Explore your favorite recipes under the \"Favorites\" section. Click on tags to view recipes within specific categories.",
    "videoId": "",
    "imageOnePath": "assets/images/cookbook/1.png",
    "imageTwoPath": "assets/images/cookbook/2.png",
    "imageThreePath": "assets/images/cookbook/3.png",
    "hasVideo": false,
    "hasStore": false,
    "storeUrl": "https://play.google.com/store/apps/details?id=com.bprldr.freewaydrive",
    "tagCount": 1,
    "tags": ["Flutter", "Firestore"],
    "isPortait": true,
    "thumbnailOnePath": "assets/images/cookbook/4.png",
    "thumbnailTwoPath": "assets/images/cookbook/5.png",
    "thumbnailThreePath": "assets/images/cookbook/6.png",
    "thumbnailString": "Cookbook is a user-friendly mobile application developed using the Flutter framework that serves as your digital recipe organizer."
  },
  
  {
    "genre": "",
    "title": "HelpChain",
    "repoLink": "https://github.com/B-C-Based-Disaster-Management",
    "imageUrl": "assets/images/helpchain/logo.png",
    "description": "This is the capstone project I worked on with my friends. Project's main goal and motivation are to provide a new blockchain based solution to disaster management. Disaster management consists of a series of disaster-related information processes in which the information is processed, stored, and disseminated to make effective decisions and construct a plan. Most of the current disaster management systems are infrastructure-dependent and work in a centralized manner, which can pose a threat in certain devastating outcomes. The involvement of both the government and the public is important in gathering and disseminating information, and their effectiveness would be severely diminished if these centralized and infrastructure dependent systems were to fail during the moments of disaster.",
    "titleOne": "Components",
    "partOne": "During the registration process, the user has to register with the system through a server because it is not feasible to create and deploy a smart contract from a mobile phone. Therefore, to sign up for the system, users must communicate with the server instead of the blockchain. The server gets the data that the user sends as parameters, which are \"Name\", \"Surname\", \"Address\", \"TCKN\" (Turkish State ID number) and using these parameters, it creates and deploys a smart contract. After creating and deploying the user’s contract to the system, the server provides the user his or her contract hash and writes that contract hash value to the Firebase. Users are required to access the blockchain with their own contract hash. This contract hash value is kept in a database to access the contracts from the desktop applications used by the relief organizations. Once registered, all the modifications to the existing records, such as address or status, will be reflected in the user's smart contract on the blockchain, by the server._The desktop application, which is the organization interface, provides the users at the organization with the ability to traverse the blockchain according to the list of the users’ contracts obtained from the Firebase and read their latest data to list the people in the blockchain with the status and address values._In the mobile application, users can create and log in to their own accounts. They will be logging in with their citizenship numbers and the password that they assigned for their accounts. The registered users can change their status to \"In distress\", \"Need Help\", \"Safe\" depending on the circumstances they are in during or after a disaster. They can also change their home address, preferably before the disastrous conditions take place, in case they move to a new location.",
    "titleTwo": "System Overview",
    "partTwo": "We used a Metamask coin wallet to test the smart contracts that we have written using Solidity language. As the testing network, we chose the Sepolia Ethereum Testing Network because of its similarities to the popular commercial blockchain networks._Infura is the tool that we use to get connection addresses on the Sepolia Ethereum test network. It provided us with the API’s for that task._Flutter is a framework that is built on Dart programming language. It is a cross platform development environment which means that we can publish the mobile application with single codebase in both Android and iOS. It has access to numerous tools such as Firebase connectivity and Web3 accesses._We utilized .NET/.NET Core’s Windows Presentation Foundation (WPF) app for the desktop application (the application which the disaster organizations will use) as part of the system. The reason we have chosen the .NET/.NET Core is that it has a wide range of integration possibilities with the technologies that are in the Microsoft ecosystem._Etherscan is a popular blockchain explorer and analytics platform especially designed for the Ethereum network. It provides us a means to track various Ethereum blockchain data that users send, such as transactions, smart contract creation, and event updates. We used this tool mainly when we did not have our “blockchain reading code” to validate and inspect the transactions and events that we send to the smart contracts.",
    "videoId": "",
    "imageOnePath": "assets/images/helpchain/1.png",
    "imageTwoPath": "assets/images/helpchain/2.png",
    "imageThreePath": "assets/images/helpchain/3.png",
    "hasVideo": false,
    "hasStore": false,
    "storeUrl": "",
    "tagCount": 4,
    "tags": [
      "Solidity",
      "Flutter",
      "C_",
      "NodeJS"
    ],
    "isPortait": true,
    "thumbnailOnePath": "assets/images/helpchain/1.png",
    "thumbnailTwoPath": "assets/images/helpchain/2.png",
    "thumbnailThreePath": "assets/images/helpchain/4.png",
    "thumbnailString": "The HelpChain system provides a new blockchain based solution to disaster management."
  }
]